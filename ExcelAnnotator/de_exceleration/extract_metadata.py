import os
import json


class MetadataExtraction:
    """
    Class to extract all the metadata of an excel file with the help of DeExcelerator.
    """

    def __init__(self, directory, file_name):
        """
        Initializes the instance, sets the environment to extract the metadata from DeExcelerator generated files.
        :param directory: Directory of file which is being processed.
        :param file_name: File name of file which is being processed.
        """

        self.directory = directory
        self.file_name = file_name

        # Static variables for DeExcelerator dictionary keys.
        self.matrix_id = 'matrix'
        self.rows_id = 'rows'
        self.cols_id = 'cols'
        self.header_info_id = 'headerInfo'
        self.meta_data_id = 'metaDaten'
        self.relation_name_id = 'relationName'

        # Storage of DeExcelerator data.
        self.matrix = []
        self.rows = []
        self.cols = []
        self.header_info = []
        self.meta_data = []
        self.relation_name = []

    def extract_metadata(self, debug_output):
        """
        Collects all the metadata from files which have been generated by DeExcelerator.
        Requires DeExcelerator already run for this file.
        :return: None
        """

        meta_data_files = [f for f in os.listdir(self.directory) if (f.startswith(self.file_name) and f.endswith('.txt'))]
        if len(meta_data_files) == 0:
            print("ERROR: No meta data files are found for file ", self.file_name)
            print("Make sure DeExcelerator has been run and Files are generated correctly.")
            return -1

        for full_file_name in meta_data_files:
            with open(self.directory + full_file_name, 'r', encoding='utf8') as meta_data_file:
                content = json.loads(meta_data_file.read())
                if debug_output:
                    print("CONTENT:", content)
                    print("META_DATA:", content['metaDaten'], '\n')

            self.matrix.append(content[self.matrix_id])
            self.rows.append(content[self.rows_id])
            self.cols.append(content[self.cols_id])
            self.header_info.append(content[self.header_info_id])
            self.meta_data.append(content[self.meta_data_id])
            self.relation_name.append(content[self.relation_name_id])

        return 0
